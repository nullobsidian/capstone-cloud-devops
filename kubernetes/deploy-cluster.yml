---
- name: Provision EC2 Cluster on AWS
  connection: local
  gather_facts: false
  hosts: localhost
  vars:
    ansible_python_interpreter: "{{ '../.ansible/bin/python' }}"
  tasks:
    - name: Generate an OpenSSH rsa keypair
      community.crypto.openssh_keypair:
        path: ../.ansible/ssh/id_rsa
        size: 2048
    - name: Import AWS Key Pair for Instances
      amazon.aws.ec2_key:
        name: ansible
        region: us-west-1
        key_material: "{{ lookup('file', '../.ansible/ssh/id_rsa.pub') }}"
    - name: Create Security Group
      amazon.aws.ec2_group:
        name: kubernetes
        description: an example EC2 group
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
    - name: Provision EC2 instances
      amazon.aws.ec2:
        key_name: ansible
        instance_type: t3.medium
        group: kubernetes 
        region: us-west-1
        instance_tags:
          Name: kubernetes-capstone
        image: ami-02c160578d2b40098
        wait: yes
        wait_timeout: 500
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 200
        count_tag:
          Name: kubernetes-capstone
        exact_count: 2
      register: aws
    - name: Add first host to the group
      add_host:
        name: "{{ aws.tagged_instances[0].public_ip }}"
        groups: masters
    - name: Add second host to the group
      add_host:
        name: "{{ aws.tagged_instances[1].public_ip }}"
        groups: workers
    - name: Pause for 1 minutes to build instances
      pause:
        minutes: 1
    - name: Setup masters
      shell: |
        echo "{{ aws.tagged_instances[0].public_ip }}" > .masters
- name: Setup and Install Kuberentes
  hosts: 'workers, masters'
  become: yes
  gather_facts: true
  remote_user: ubuntu
  vars:
      ansible_python_interpreter: "{{ '/usr/bin/python3' }}"
      ansible_ssh_private_key_file: "{{ './.ansible/ssh/id_rsa' }}"
  tasks:
    - name: Create Kube user account
      user: name=kube append=yes state=present createhome=yes shell=/bin/bash
    - name: Alllow 'kube' to use sudo without needing a password
      lineinfile:
        dest: /etc/sudoers
        line: 'kube ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    - name: Set up authorized keys for the kube user
      authorized_key: user=kube key="{{item}}"
      with_file:
        - "{{ '../.ansible/ssh/id_rsa.pub' }}"
    - name: Create containerd config file
      file:
        path: "/etc/modules-load.d/containerd.conf"
        state: "touch"
    - name: Add conf for containerd
      blockinfile:
        path: "/etc/modules-load.d/containerd.conf"
        block: |
          overlay
          br_netfilter
    - name: modprobe
      shell: |
        sudo modprobe overlay
        sudo modprobe br_netfilter
    - name: Set system configurations for Kubernetes networking
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: "touch"
    - name: Add conf for containerd
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
    - name: Apply new settings
      command: sudo sysctl --system
    - name: install containerd
      shell: |
        sudo apt-get update && sudo apt-get install -y containerd
        sudo mkdir -p /etc/containerd
        sudo containerd config default | sudo tee /etc/containerd/config.toml
        sudo systemctl restart containerd
    - name: disable swap
      shell: |
        sudo swapoff -a
        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    - name: install and configure dependencies
      shell: |
        sudo apt-get update && sudo apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    - name: Create kubernetes repo file
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: "touch"
    - name: Add K8s Source
      blockinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        block: |
          deb https://apt.kubernetes.io/ kubernetes-xenial main
    - name: install kubernetes
      shell: |
        sudo apt-get update
        sudo apt-get install -y kubelet=1.22.0-00 kubeadm=1.22.0-00 kubectl=1.22.0-00
    - name: Pause for 1 minutes to install requirements
      pause:
        minutes: 1

- hosts: masters
  become: yes
  gather_facts: true
  remote_user: kube
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/python3' }}"
    ansible_ssh_private_key_file: "{{ './.ansible/ssh/id_rsa' }}"
  tasks:
    - name: Copy Master IPs
      copy:
        src: .masters
        dest: /home/kube/.masters
    - name: Register Masters
      shell: |
        cat .masters
      register: masters
    - name: Initialize cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans="{{ masters.stdout }}"
      args:
        chdir: $HOME
        creates: cluster_initialized.txt
    - name: Create .kube directory
      become: yes
      become_user: kube
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755
    - name: Copies admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kube/.kube/config
        remote_src: yes
        owner: kube
    - name: Install Pod network
      become: yes
      become_user: kube
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 
      args:
        chdir: $HOME
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: kube
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command
    - debug:
        msg: "{{ kubernetes_join_command.stdout }}"
    - name: Copy join command to local file.
      become: yes
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

- hosts: workers
  become: yes
  gather_facts: true
  remote_user: kube 
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/python3' }}"
    ansible_ssh_private_key_file: "{{ './.ansible/ssh/id_rsa' }}"
  tasks:
   - name: Copy join command from Ansiblehost to the worker nodes.
     become: yes
     copy:
       src: /tmp/kubernetes_join_command
       dest: /tmp/kubernetes_join_command
       mode: 0777
   - name: Join the Worker nodes to the cluster.
     become: yes
     command: sh /tmp/kubernetes_join_command
     register: joined_or_not
